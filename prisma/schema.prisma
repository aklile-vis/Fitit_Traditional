generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows"]
  engineType    = "binary"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                String            @id @default(cuid())
  email             String            @unique
  name              String?
  password          String
  role              Role              @default(USER)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  Media             Media[]
  exportLogs        ExportLog[]
  uploads           FileUpload[]
  materialLibraries MaterialLibrary[]
  projects          Project[]
  properties        Property[]
  savedListings     SavedListing[]
  profile           UserProfile?

  @@map("users")
}

model UserProfile {
  id         String   @id @default(cuid())
  userId     String   @unique
  phone      String?
  jobTitle   String?
  agencyName String?
  avatarUrl  String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])

  @@map("user_profiles")
}

model Property {
  id          String           @id @default(cuid())
  title       String
  description String?
  address     String
  price       Float
  bedrooms    Int
  bathrooms   Int
  squareFeet  Int?
  images      String
  modelPath   String?
  isActive    Boolean          @default(true)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  userId      String
  category    PropertyCategory @default(RESIDENTIAL)
  media       Media[]
  projects    Project[]
  user        User             @relation(fields: [userId], references: [id])

  @@map("properties")
}

model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  status      ProjectStatus @default(PROCESSING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  userId      String
  propertyId  String?
  files       FileUpload[]
  property    Property?     @relation(fields: [propertyId], references: [id])
  user        User          @relation(fields: [userId], references: [id])

  @@map("projects")
}

model FileUpload {
  id                String         @id @default(cuid())
  filename          String
  originalName      String
  filePath          String
  fileSize          Int
  mimeType          String
  status            FileStatus     @default(UPLOADED)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  userId            String
  projectId         String?
  processedFilePath String?
  ifcFilePath       String?
  glbFilePath       String?
  errorMessage      String?
  usdFilePath       String?
  project           Project?       @relation(fields: [projectId], references: [id])
  user              User           @relation(fields: [userId], references: [id])
  units             PropertyUnit[]

  @@map("file_uploads")
}

model MaterialLibrary {
  id        String           @id @default(cuid())
  name      String
  ownerId   String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  owner     User?            @relation(fields: [ownerId], references: [id])
  options   MaterialOption[]

  @@map("material_libraries")
}

model MaterialOption {
  id              String                  @id @default(cuid())
  name            String
  category        String
  unit            String
  price           Float
  description     String?
  baseColorHex    String?
  roughness       Float?                  @default(0.8)
  albedoUrl       String?
  normalUrl       String?
  roughnessMapUrl String?
  metallicMapUrl  String?
  aoMapUrl        String?
  tilingScale     Float?                  @default(1.0)
  metallic        Float?                  @default(0)
  libraryId       String
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt
  library         MaterialLibrary         @relation(fields: [libraryId], references: [id])
  whitelists      UnitMaterialWhitelist[]

  @@map("material_options")
}

model PropertyUnit {
  id              String                  @id @default(cuid())
  name            String
  fileUploadId    String?
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt
  editorState     Json?
  editorStatePath String?
  media           Media[]
  selections      BuyerSelection[]
  exportLogs      ExportLog[]
  fileUpload      FileUpload?             @relation(fields: [fileUploadId], references: [id])
  listing         UnitListing?
  whitelists      UnitMaterialWhitelist[]

  @@map("property_units")
}

model BuyerSelection {
  id              String       @id @default(cuid())
  unitId          String
  userId          String?
  selections      Json
  priceTotal      Float        @default(0)
  basePrice       Float        @default(0)
  addonTotal      Float        @default(0)
  lineItems       Json?
  clientPrice     Float?
  priceDifference Float?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  unit            PropertyUnit @relation(fields: [unitId], references: [id])

  @@map("buyer_selections")
}

model UnitListing {
  id           String         @id @default(cuid())
  unitId       String         @unique
  title        String
  description  String?
  address      String?
  city         String?
  subCity      String?
  latitude     Float?         // Geographic coordinates for map display
  longitude    Float?         // Geographic coordinates for map display
  bedrooms     Int?           @default(0)
  bathrooms    Int?           @default(0)
  areaSqm      Float?         @default(0)
  basePrice    Float          @default(0)
  currency     String         @default("ETB")
  coverImage   String?
  has3D        Boolean        @default(false)
  isPublished  Boolean        @default(false)
  amenities    String?
  features     String?
  floorPlans   String?
  propertyType String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  createdById  String?
  savedBy      SavedListing[]
  unit         PropertyUnit   @relation(fields: [unitId], references: [id])

  @@map("unit_listings")
}

model SavedListing {
  id        String      @id @default(cuid())
  userId    String
  listingId String
  createdAt DateTime    @default(now())
  listing   UnitListing @relation(fields: [listingId], references: [id])
  user      User        @relation(fields: [userId], references: [id])

  @@unique([userId, listingId])
  @@map("saved_listings")
}

model UnitMaterialWhitelist {
  id            String         @id @default(cuid())
  unitId        String
  optionId      String
  overridePrice Float?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  buyerReady    Boolean        @default(true)
  option        MaterialOption @relation(fields: [optionId], references: [id])
  unit          PropertyUnit   @relation(fields: [unitId], references: [id])

  @@unique([unitId, optionId])
  @@map("unit_material_whitelist")
}

model ExportLog {
  id            String       @id @default(cuid())
  unitId        String
  userId        String?
  artifactCount Int          @default(0)
  metadata      Json?
  createdAt     DateTime     @default(now())
  user          User?        @relation(fields: [userId], references: [id])
  unit          PropertyUnit @relation(fields: [unitId], references: [id])

  @@map("export_logs")
}

model AssetCategory {
  id          String          @id @default(cuid())
  slug        String          @unique
  name        String
  description String?
  parentId    String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  parent      AssetCategory?  @relation("AssetCategoryHierarchy", fields: [parentId], references: [id])
  children    AssetCategory[] @relation("AssetCategoryHierarchy")
  assets      Asset[]

  @@map("asset_categories")
}

model Asset {
  id          String         @id @default(cuid())
  slug        String         @unique
  name        String
  description String?
  categoryId  String
  previewUrl  String?
  metadata    Json?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  variants    AssetVariant[]
  category    AssetCategory  @relation(fields: [categoryId], references: [id])

  @@map("assets")
}

model AssetVariant {
  id             String                 @id @default(cuid())
  assetId        String
  name           String
  sku            String?
  lodLevel       String?
  modelPath      String?
  thumbnailUrl   String?
  metadata       Json?
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
  materials      AssetVariantMaterial[]
  asset          Asset                  @relation(fields: [assetId], references: [id])
  roomPlacements RoomStylePresetAsset[]

  @@map("asset_variants")
}

model MaterialProfile {
  id               String                    @id @default(cuid())
  slug             String                    @unique
  name             String
  description      String?
  materialType     String?
  albedoPath       String?
  normalPath       String?
  roughnessPath    String?
  metallicPath     String?
  aoPath           String?
  displacementPath String?
  metadata         Json?
  createdAt        DateTime                  @default(now())
  updatedAt        DateTime                  @updatedAt
  assets           AssetVariantMaterial[]
  roomUsages       RoomStylePresetMaterial[]

  @@map("material_profiles")
}

model AssetVariantMaterial {
  id                String          @id @default(cuid())
  assetVariantId    String
  materialProfileId String
  usage             String?
  uvScale           Float?
  metadata          Json?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  materialProfile   MaterialProfile @relation(fields: [materialProfileId], references: [id])
  assetVariant      AssetVariant    @relation(fields: [assetVariantId], references: [id])

  @@unique([assetVariantId, materialProfileId, usage])
  @@map("asset_variant_materials")
}

model RoomStylePreset {
  id          String                    @id @default(cuid())
  slug        String                    @unique
  name        String
  description String?
  roomType    String?
  metadata    Json?
  createdAt   DateTime                  @default(now())
  updatedAt   DateTime                  @updatedAt
  assets      RoomStylePresetAsset[]
  materials   RoomStylePresetMaterial[]

  @@map("room_style_presets")
}

model RoomStylePresetMaterial {
  id                String          @id @default(cuid())
  presetId          String
  materialProfileId String
  targetCategory    String
  priority          Int?            @default(0)
  metadata          Json?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  materialProfile   MaterialProfile @relation(fields: [materialProfileId], references: [id])
  preset            RoomStylePreset @relation(fields: [presetId], references: [id])

  @@unique([presetId, targetCategory])
  @@map("room_style_preset_materials")
}

model RoomStylePresetAsset {
  id             String          @id @default(cuid())
  presetId       String
  assetVariantId String
  placement      Json?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  assetVariant   AssetVariant    @relation(fields: [assetVariantId], references: [id])
  preset         RoomStylePreset @relation(fields: [presetId], references: [id])

  @@map("room_style_preset_assets")
}

model Media {
  id           String        @id @default(cuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  type         MediaType
  role         MediaRole?
  sortOrder    Int           @default(0)
  url          String
  mimeType     String?
  fileSize     Int?
  altText      String?
  caption      String?
  propertyId   String?
  unitId       String?
  uploadedById String?
  uploadedBy   User?         @relation(fields: [uploadedById], references: [id])
  unit         PropertyUnit? @relation(fields: [unitId], references: [id], onDelete: Cascade)
  property     Property?     @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@index([propertyId, type, role, sortOrder])
  @@index([unitId, type, role, sortOrder])
}

enum Role {
  USER
  AGENT
  ADMIN
}

enum ProjectStatus {
  PROCESSING
  COMPLETED
  FAILED
}

enum FileStatus {
  UPLOADED
  PROCESSING
  COMPLETED
  FAILED
}

enum PropertyCategory {
  RESIDENTIAL
  COMMERCIAL
}

enum MediaType {
  IMAGE
  VIDEO
  DOCUMENT
  MODEL
  OTHER
}

enum MediaRole {
  COVER
  GALLERY
  FLOORPLAN
  VIRTUAL_TOUR
  DOCUMENT
  OTHER
}
