                <span className="text-xs uppercase tracking-wide text-muted">Total with selections</span>
                <span className="text-2xl font-semibold text-primary">{renderPrice(totalPriceEtb)}</span>
              </div>
              <div className="text-[11px] text-secondary">
                Includes base price {renderPrice(basePriceEtb)} and selected finish upgrades.
              </div>
              <div className="text-[10px] text-disabled">
                Rates sourced from Commercial Bank of Ethiopia. Default view shows ETB conversion.
              </div>
              {isPriceStale && (
                <div className="rounded-sm border border-yellow-500/40 bg-yellow-500/10 px-3 py-2 text-[11px] text-yellow-100">
                  Adjustments not saved yet — totals reflect approximate preview.
                </div>
              )}
            </PanelSection>

            {breakdown && (
              <PanelSection title="Pricing breakdown" defaultOpen>
                <div className="flex items-center justify-between text-[11px] uppercase tracking-wide text-muted">
                  <span>Base price</span>
                  <span>{renderPrice(breakdown.basePrice)}</span>
                </div>
                {breakdown.lineItems.length > 0 ? (
                  <div className="space-y-2 text-secondary">
                    {breakdown.lineItems.map((item) => (
                      <div key={`${item.category}-${item.optionId}`} className="flex items-center justify-between gap-3">
                        <span className="text-[11px] uppercase tracking-wide text-muted">{item.category}</span>
                        <div className="flex flex-col items-end text-right">
                          <span className="text-sm text-primary">{item.optionName}</span>
                          <span className="text-[11px] text-disabled">
                            {renderPrice(item.unitPrice)} × {item.quantity}
                          </span>
                        </div>
                        <span className="text-sm font-medium text-primary">{renderPrice(item.subtotal)}</span>
                      </div>
                    ))}
                  </div>
                ) : (
                  <div className="text-xs text-muted">No upgrades selected.</div>
                )}
                <div className="border-t border-[color:var(--surface-border)] pt-2 text-primary">
                  <div className="flex items-center justify-between text-sm text-secondary">
                    <span>Upgrades total</span>
                    <span>{renderPrice(breakdown.addonTotal)}</span>
                  </div>
                  <div className="flex items-center justify-between text-sm font-semibold text-primary">
                    <span>Total with upgrades</span>
                    <span>{renderPrice(breakdown.priceTotal)}</span>
                  </div>
                  {breakdown.savedAt && (
                    <div className="pt-1 text-[11px] text-disabled">
                      Saved {new Date(breakdown.savedAt).toLocaleString()}
                    </div>
                  )}
                </div>
              </PanelSection>
            )}

            {history.length > 0 && (
              <PanelSection title="Saved history" defaultOpen={false}>
                <div className="space-y-2">
                  {history.map((entry, index) => {
                    const timestamp = entry.savedAt ? new Date(entry.savedAt) : null
                    const canPreview = entry.selections && Object.keys(entry.selections).length > 0
                    const handlePreview = () => {
                      if (!canPreview) return
                      const nextSelections = entry.selections ?? {}
                      setSelected(nextSelections)
                      setPrice(entry.priceTotal)
                      setPriceDetails({ ...entry, selections: nextSelections })
                      setIsPriceStale(true)
                      setStatus('Preview loaded from history — save to commit changes')
                    }
                    return (
                      <div key={entry.savedAt ?? index} className="rounded border border-[color:var(--surface-border)] bg-[color:var(--surface-1)] p-3 text-secondary">
                        <div className="flex items-center justify-between text-xs uppercase tracking-wide text-muted">
                          <span>{timestamp ? timestamp.toLocaleString() : 'Unknown timestamp'}</span>
                          <span>{renderPrice(entry.priceTotal)}</span>
                        </div>
                        {typeof entry.priceDifference === 'number' && entry.priceDifference !== 0 && (
                          <div className={`text-[11px] ${entry.priceDifference > 0 ? 'text-yellow-500' : 'text-emerald-600'}`}>
                            Pricing adjustment vs recorded total: {renderPrice(entry.priceDifference)}
                          </div>
                        )}
                        <div className="mt-2 flex flex-wrap gap-2 text-[11px] text-muted">
                          {entry.lineItems.map((item) => (
                            <span key={`${item.category}-${item.optionId}`} className="rounded bg-[color:var(--surface-2)] px-2 py-1 text-secondary">
                              {item.category}: {item.optionName}
                            </span>
                          ))}
                          {entry.lineItems.length === 0 && <span>No upgrades selected</span>}
                        </div>
                        <div className="mt-3 text-right">
                          <button
                            onClick={handlePreview}
                            disabled={!canPreview}
                            className="rounded border border-[color:var(--surface-border)] px-3 py-1 text-xs font-semibold text-primary transition hover:border-brand disabled:opacity-40"
                          >
                            Preview selection
                          </button>
                        </div>
                      </div>
                    )
                  })}
                </div>
              </PanelSection>
            )}

            <button
              className="rounded-md border border-[color:var(--brand-600-70)] bg-[color:var(--brand-600)] px-4 py-3 text-sm font-semibold text-white transition hover:bg-[color:var(--brand-500)] disabled:cursor-not-allowed disabled:opacity-60"
              onClick={save}
              disabled={isSaving}
            >
              {isSaving ? 'Saving…' : isAuthenticated ? 'Save design' : 'Login to save'}
            </button>
          </aside>
        </div>
  
        )}
      </div>
        
      ): (
      <div
        role="tabpanel"
        id="panel-traditional"
        aria-labelledby="tab-traditional"
        className="flex flex-1 min-h-0"
      >
        
        <div className="flex flex-1 min-h-0">
          <div className="flex-1 overflow-auto bg-[color:var(--surface-0)]">
            <TraditionalViewer listing={data} />
          </div>
        </div>
      </div>
        
      )}
      
    </div>
  )
}

type PanelSectionProps = {
  title: string
  children: ReactNode
  defaultOpen?: boolean
}

function PanelSection({ title, defaultOpen = true, children }: PanelSectionProps) {
  const [open, setOpen] = useState(defaultOpen)
  return (
    <div className="overflow-hidden rounded-md border border-[color:var(--surface-border)] bg-[color:var(--surface-1)] shadow-[var(--shadow-soft)]">
      <button
        className="flex w-full items-center justify-between border-b border-[color:var(--surface-border)] bg-[color:var(--surface-0)] px-3 py-2 text-left text-xs font-semibold uppercase tracking-wide text-secondary transition hover:bg-[color:var(--surface-2)]"
        onClick={() => setOpen((prev) => !prev)}
        type="button"
      >
        <span>{title}</span>
        <span className="text-[10px] uppercase tracking-wide text-muted">{open ? 'Hide' : 'Show'}</span>
      </button>
      {open && <div className="space-y-3 px-3 py-3 text-xs text-secondary">{children}</div>}
    </div>
  )
}

useGLTF.preload('/placeholder.glb')
